#!/bin/bash
#
# Copyright (c) 2017, UT-BATTELLE, LLC
# All rights reserved.
# 
# This software is released under the BSD license detailed
# in the LICENSE file in the top level a-prime directory
#
#
# Template driver script to generate A-Prime coupled diagnostics on ACME machines
#  (Supported machines/HPC centers as of June 2017 are: Edison, OLCF, aims4/acme1
#   and LANL)
#
# Basic usage (also see README for specific instructions on running on different machines):
#       1. copy this template to something like run_aprime_$user.bash
#       2. open run_aprime_$user.bash and set user defined, case-specific variables
#          These are the main variables that the user will likely have to modify
#            (more documentation details can be found where variables are defined):
#            output_base_dir: the base location where all output will go
#            test_casename: name of model case to analyze
#            test_archive_dir: directory where test_casename data sits
#            test_atm_res: resolution of atm component
#            test_mpas_mesh_name: resolution of ocn/ice component
#            test_begin_yr_climo: first year to analyze climatology
#            test_end_yr_climo: last year to analyze climatology
#            test_begin_yr_ts: first year to create time series
#            test_end_yr_ts: last year to create time series
#            ref_case: baseline (ACME v1 and beyond) model case to compare
#                      (or 'obs' for comparison with observation)
#            ref_case_v0: baseline ACME v0 case for comparsion to POP/CICE ocn/ice
#                         (pre-processed diagnostics)
#            generate_atm_diags: flag to produce atm diagnostics
#            generate_ocnice_diags: flag to produce ocn/ice diagnostics
#            run_batch_script: flag to submit to batch queue or not
#       3. execute: ./run_aprime_$user.bash 
#
# List of ACME output files that are needed for A-Prime to work:
#       - atmosphere files:
#              *.cam.h0.*.nc
#       - mpas-o files:
#               mpaso.hist.am.timeSeriesStatsMonthly.*.nc (Note: since OHC
#                   anomalies are computed wrt the first year of the simulation,
#                   if OHC diagnostics is activated, the analysis will need the
#                   first full year of mpaso.hist.am.timeSeriesStatsMonthly.*.nc
#                   files, no matter what begin_yr_ts, end_yr_ts are. This is
#                   especially important to know if short term archiving is
#                   used in the run to analyze: in that case, set short_term_archive
#                   to 1 and choose begin_yr_ts, end_yr_ts to include only data
#                   that have been short-term-archived).
#               mpaso.rst.0002-01-01_00000.nc (or any other restart file)
#               streams.ocean
#       - mpas-cice files:
#               mpascice.hist.am.timeSeriesStatsMonthly.*.nc
#               streams.cice
#
# Meaning of acronyms/words used in variable names below:
#	test:		 Test case
#	ref:		 Reference case or 'obs'
#	ts: 		 Time series; e.g. test_begin_yr_ts
#       climateIndex_ts: Time series for climate indexes such as Nino3.4.
#                        NB: if begin_yr_climateIndex_ts=1 and end_yr_climateIndex_ts=9999,
#                        the climate index time series is computed over the full
#                        available data set
#	climo: 		 Climatology
#	begin_yr: 	 Model year to start analysis 
#	end_yr:		 Model year to end analysis
#       condense:        Create a new file for each variable with time series data
#                        for that variable. This is used to create climatology (if
#                        not pre-computed) and in generating time series plots
#	archive_dir:	 Location of model generated output directory
#	scratch_dir:	 Location of directory where the user wants to store 'scratch'
#                        files generated by the diagnostics. This includes climos, remapped
#                        climos, condensed files and data files used for plotting.
#	short_term_archive: If equal to 1, the script adds archive/(modelcomponent)/hist
#                           after 'casename' to 'archive_dir'.
#

########################################################################
# PART I
# USER DEFINED, CASE-SPECIFIC VARIABLES TO SPECIFY (REQUIRED)

# Root directory where all analysis output is stored
# (e.g., plots will go in a specific subdirectory of $output_base_dir,
# as will log files, generated climatologies, etc)
export output_base_dir=%%output_base_dir%%

# ** Variables relevant for main test case **
#  Case Name (NB: $test_casename will be appended to $test_archive_dir)
export test_casename=%%test_casename%%
#  Root directory pointing to model data. If test_short_term_archive=0,
#  $test_casename/run will be appended to test_archive_dir. If
#  test_short_term_archive=1, $test_casename/archive/modelcomponent/hist
#  will instead be appended.
export test_archive_dir=%%test_archive_dir%%
#  Short-term archive option
export test_short_term_archive=0

#  Atmosphere grid resolution name (e.g. ne30, ne60, ne120) 
export test_atm_res=%%test_atm_res%%
#  MPAS mesh name (e.g. oEC60to30v1, oEC60to30v3, oRRS18to6v3)
#  NB: test_atm_res and test_mpas_mesh_name may change with a different choice
#  of test_casename. For example, the MPAS meshes ending with 'v1' should be
#  used for beta0 and older runs, while those ending with 'v3' should be
#  used for beta1 and newer runs.
export test_mpas_mesh_name=%%test_mpas_mesh_name%%
#  Year start/end for climatologies
export test_begin_yr_climo=%%begin_yr%%
export test_end_yr_climo=%%end_yr%%
#  Year start/end for time series
export test_begin_yr_ts=%%begin_yr%%
export test_end_yr_ts=%%end_yr%%
#  Year start/end for ocean Nino3.4 index diagnostics (both ocn/ice and
#  atm diagnostics)
export test_begin_yr_climateIndex_ts=%%begin_yr%%
export test_end_yr_climateIndex_ts=%%end_yr%%

#  Atmosphere switches (True(1)/False(0)) to condense variables, compute climos, remap climos and condensed time series file
#  If no pre-processing is done (climatology, remapping), all the switches below should be 1
#  If a switch is 0, then the user should ensure that the needed files are in the scratch directory (defined below)
#  If a switch is 0 for climo, then the user should ensure that the files in the scratch directory correspond to the
#  intended begin and end years set above.
export test_compute_climo=1
export test_remap_climo=1
#  The following is ignored if test_compute_climo=0. If test_condense_field_climo=1
#  and test_compute_climo=0 the script will look for a condensed file
export test_condense_field_climo=1
export test_condense_field_ts=1
export test_remap_ts=1
export test_compute_climo_enso_atm=1
export test_condense_field_enso_atm=1
export test_remap_climo_enso_atm=1
export test_remap_ts_enso_atm=1

# In the following we define some machine specific variables (such as
# projdir or the location of observational data) that the user is 
# unlikely to have to modify in most cases
if [ ${HOSTNAME:0:6} == "edison" ]; then
  export machname="nersc"
elif [ ${HOSTNAME:0:4} == "rhea" ] || [ ${HOSTNAME:0:5} == "titan" ]; then
  export machname="olcf"
elif [ ${HOSTNAME:0:5} == "aims4" ]; then
  export machname="aims4"
elif [ ${HOSTNAME:0:5} == "acme1" ]; then
  export machname="acme1"
elif [ ${HOSTNAME:0:4} == "wolf" ]; then
  export machname="lanl"
else
  echo "Unsupported host $HOSTNAME. Exiting."
  exit 1
fi
# Define project and www directories
if [ $machname == "nersc" ]; then
  # Project directory
  projdir=/global/project/projectdirs/acme
  # Location of website directory to host the webpage
  export www_dir=/global/project/projectdirs/acme/www/$USER
elif [ $machname == "olcf" ]; then
  projdir=$PROJWORK/cli115
  export www_dir=/ccs/proj/cli115/www/$USER
elif [ $machname == "aims4" ] || [ $machname == "acme1" ]; then
  projdir=/space2
  export www_dir=/var/www/acme/acme-diags/$USER
elif [ $machname == "lanl" ]; then
  projdir=/usr/projects/climate/SHARED_CLIMATE
  export www_dir=$output_base_dir/www
fi

# ** Reference case variables (similar to test_case variables) **
export ref_case=obs
if [ $machname == "nersc" ]; then
  export ref_archive_dir=$projdir/observations/Atm
elif [ $machname == "olcf" ]; then
  export ref_archive_dir=$projdir/observations/Atm
elif [ $machname == "aims4" ] || [ $machname == "acme1" ]; then
  export ref_archive_dir=$projdir/diagnostics/observations/Atm
elif [ $machname == "lanl" ]; then
  export ref_archive_dir=$projdir/obs_for_diagnostics
fi
#export ref_case=casename
#export ref_archive_dir=dir/to/refcase_data	# $ref_case will be appended to this
export ref_short_term_archive=0

# ACMEv0 ref_case info for ocn/ice diags
# ** IMPORTANT: the ACMEv0 model data MUST have been pre-processed.
# ** IF THIS PRE_PROCESSED DATA IS NOT AVAILABLE, SET ref_case_v0=None **
export ref_case_v0=B1850C5_ne30_v0.4
if [ $machname == "nersc" ]; then
  export ref_archive_v0_ocndir=$projdir/ACMEv0_lowres/${ref_case_v0}/ocn/postprocessing
  export ref_archive_v0_seaicedir=$projdir/ACMEv0_lowres/${ref_case_v0}/ice/postprocessing
elif [ $machname == "olcf" ]; then
  export ref_archive_v0_ocndir=$projdir/milena/ACMEv0_lowres/${ref_case_v0}/ocn/postprocessing
  export ref_archive_v0_seaicedir=$projdir/milena/ACMEv0_lowres/${ref_case_v0}/ice/postprocessing
elif [ $machname == "aims4" ] || [ $machname == "acme1" ]; then
  export ref_archive_v0_ocndir=/space2/diagnostics/ACMEv0_lowres/${ref_case_v0}/ocn/postprocessing
  export ref_archive_v0_seaicedir=/space2/diagnostics/ACMEv0_lowres/${ref_case_v0}/ice/postprocessing
elif [ $machname == "lanl" ]; then
  export ref_archive_v0_ocndir=$projdir/ACMEv0_lowres/${ref_case_v0}/ocn/postprocessing
  export ref_archive_v0_seaicedir=$projdir/ACMEv0_lowres/${ref_case_v0}/ice/postprocessing
fi

# The following are ignored if ref_case=obs
export ref_atm_res=ne30
export ref_mpas_mesh_name=oEC60to30v3
export ref_begin_yr_climo=95
export ref_end_yr_climo=100
export ref_begin_yr_ts=95
export ref_end_yr_ts=100
# NB: if ref_case=obs then the ENSO obs analysis begin year and end year should be set to 1979 and 2006:
export ref_begin_yr_climateIndex_ts=1979
export ref_end_yr_climateIndex_ts=2006
export ref_compute_climo=1
export ref_remap_climo=1
export ref_condense_field_climo=1
export ref_condense_field_ts=1
export ref_remap_ts=1
export ref_compute_climo_enso_atm=1
export ref_remap_climo_enso_atm=1
export ref_condense_field_enso_atm=1
export ref_remap_ts_enso_atm=1

# Select sets of diagnostics to generate (False = 0, True = 1)
export generate_atm_diags=1
export generate_atm_enso_diags=1
export generate_ocnice_diags=1

# The following ocn/ice diagnostic switches are ignored if generate_ocnice_diags is set to 0
export generate_ohc_trends=1
export generate_sst_trends=1
export generate_sst_climo=1
export generate_sss_climo=1
export generate_mld_climo=1
export generate_mht=1
# Setting MOC diagnostics to false by default, because of current (Sep 2017) problems in
# running the MOC scripts on high-resolution MPAS data. The user can switch generate_moc=1
# if analyzing low-resolution (EC60to30) MPAS output. 
export generate_moc=0
export generate_seaice_trends=1
export generate_seaice_climo=1
export generate_nino34=1

# Generate standalone html file to view plots on a browser, if required
export generate_html=1

# Set options to run a-prime in parallel
#   If run_batch_script=false, aprime_atm_diags.bash and aprime_ocnice_diags.bash are called directly.
#   If run_batch_script=true, aprime_atm_diags.bash and aprime_ocnice_diags.bash are called within
#     a machine-specific batch script (one script for atm and one for ocn/ice diags). In this case,
#     atmosphere diagnostics are run in background mode onto a single compute node. Ocean/ice
#     diagnostics, on the other hand, grab a number of compute nodes set by 'mpas_analysis_tasks':
#     each ocn/ice task is run on a different node. If all ocn/ice diagnostics are run (by activating
#     all the 'generate' options above), the total number of tasks is equal to 10, hence the default
#     here is 10. The user can decide to reduce mpas_analysis_tasks accordingly, if asking to compute
#     a reduced set of ocn/ice diagnostics. Finally, the user can set the walltime (default is 1hr
#     for atm and 1hr for ocn/ice diags, which is fine to compute ~20 year climatology at low-resolution).
#   Finally, choose whether to run ncclimo in parallel mode. In that case, set ncclimoParallelMode to
#   "bck", and nclimo will launch 12 parallel tasks on a single node to compute 12 monthly
#   climatologies. Otherwise, leave ncclimoParallelMode="serial".
export run_batch_script=false
export mpas_analysis_tasks=10
export batch_walltime="01:00:00" # HH:MM:SS
export ncclimoParallelMode="bck"
###############################################################################################

########################################################################
# PART II
# OTHER VARIABLES (NOT REQUIRED TO BE CHANGED BY THE USER - DEFAULTS SHOULD
# WORK, USER PREFERENCE BASED CHANGES)

# Set paths to scratch, plots and logs directories
export test_scratch_dir=$output_base_dir/coupled_diagnostics/$test_casename.scratch
export ref_scratch_dir=$output_base_dir/coupled_diagnostics/$ref_case.scratch
export plots_base_dir=$output_base_dir/coupled_diagnostics/${test_casename}_vs_${ref_case}
if [ $ref_case == "obs" ]; then
  export plots_dir_name=${test_casename}_years${test_begin_yr_climo}-${test_end_yr_climo}_vs_${ref_case}
else
  export plots_dir_name=${test_casename}_years${test_begin_yr_climo}-${test_end_yr_climo}_vs_${ref_case}_years${ref_begin_yr_climo}-${ref_end_yr_climo}
fi
# User can set a custom name for the $plots_dir_name here, if the default (above) is not ideal 
#export plots_dir_name=XXXX
export plots_dir=$plots_base_dir/$plots_dir_name
export log_dir=$plots_dir.logs

# Set atm specific paths to mapping and data files locations
export remap_files_dir=$projdir/mapping/maps
export GPCP_regrid_wgt_file=$projdir/mapping/maps/$test_atm_res-to-GPCP.conservative.wgts.nc
export CERES_EBAF_regrid_wgt_file=$projdir/mapping/maps/$test_atm_res-to-CERES-EBAF.conservative.wgts.nc
export ERS_regrid_wgt_file=$projdir/mapping/maps/$test_atm_res-to-ERS.conservative.wgts.nc

# Set ocn/ice specific paths to mapping and region masking file locations
#     remap from MPAS mesh to regular 0.5degx0.5deg grid
#     NB: if this file does not exist, it will be generated by the analysis
export mpas_remapfile=$projdir/mpas_analysis/mapping/map_${test_mpas_mesh_name}_to_0.5x0.5degree_bilinear.nc
#     MPAS-O region mask files containing masking information for the Atlantic basin
#     needed for the MOC diagnostics.
#     NB: this file, instead, *needs* to be present 
if [ $machname == "lanl" ] || [ $machname == "aims4" ] || [ $machname == "acme1" ]; then
  export mpaso_regions_file=$projdir/mpas_analysis/region_masks/${test_mpas_mesh_name}_Atlantic_region_and_southern_transect.nc
else
  export mpaso_regions_file=$projdir/mapping/grids/${test_mpas_mesh_name}_SingleRegionAtlanticWTransportTransects_masks.nc
fi

# Set ocn/ice specific paths to data file names and locations
if [ $machname == "nersc" ]; then
  export obs_ocndir=$projdir/observations/Ocean
  export obs_seaicedir=$projdir/observations/SeaIce
elif [ $machname == "olcf" ]; then
  export obs_ocndir=$projdir/observations
  export obs_seaicedir=$projdir/observations/SeaIce
elif [ $machname == "aims4" ] || [ $machname == "acme1" ]; then
  export obs_ocndir=$projdir/diagnostics/observations/Ocean
  export obs_seaicedir=$projdir/diagnostics/observations/SeaIce
elif [ $machname == "lanl" ]; then
  export obs_ocndir=$projdir/observations
  export obs_seaicedir=$projdir/observations/SeaIce
fi
export obs_sstdir=$obs_ocndir/SST
export obs_sssdir=$obs_ocndir/SSS
export obs_mlddir=$obs_ocndir/MLD
export obs_ninodir=$obs_ocndir/Nino
export obs_mhtdir=$obs_ocndir/MHT
export obs_iceareaNH=$obs_seaicedir/IceArea_timeseries/iceAreaNH_climo.nc
export obs_iceareaSH=$obs_seaicedir/IceArea_timeseries/iceAreaSH_climo.nc
export obs_icevolNH=$obs_seaicedir/PIOMAS/PIOMASvolume_monthly_climo.nc
export obs_icevolSH=none
##############################################################################

########################################################################
# PART III
# USER SHOULD NOT NEED TO CHANGE ANYTHING HERE ONWARDS

export coupled_diags_home=$PWD
# unique ID to be used to name unique MPAS-Analysis confg files
# and batch scripts
export uniqueID=`date +%Y-%m-%d_%H%M%S`

# Check on www_dir, permissions included
# Create www_dir if it does not exist, purge it if it does
if [ ! -d $www_dir/$plots_dir_name ]; then
  mkdir $www_dir/$plots_dir_name
else
  rm -f $www_dir/$plots_dir_name/*
fi

# LOAD THE MACHINE-SPECIFIC ANACONDA-2.7 ENVIRONMENT
source $MODULESHOME/init/bash  
if [ $machname == "nersc" ]; then
  module unload python
  module unload python_base
  module use /global/project/projectdirs/acme/software/modulefiles/all
  module load python/anaconda-2.7-acme
  export NCO_PATH_OVERRIDE=No
elif [ $machname == "olcf" ]; then
  module unload python
  module use /ccs/proj/cli115/pwolfram/modulefiles/all
  module load python/anaconda-2.7-acme
  export NCO_PATH_OVERRIDE=No
elif [ $machname == "acme1" ]; then
  export PATH=/usr/local/anaconda2/bin:$PATH
  source activate ACME_UNIFIED
  export NCO_PATH_OVERRIDE=No
elif [ $machname == "aims4" ]; then
  export PATH=/usr/local/anaconda2/bin:$PATH
  source activate ACME-UNIFIED
  export NCO_PATH_OVERRIDE=No
elif [ $machname == "lanl" ]; then
  module unload python
  module use $projdir/modulefiles/all
  module load python/anaconda-2.7-climate
fi

# The following is needed for rhea, aims4 and acme1
if [ $machname == "aims4" ] || [ $machname == "acme1" ] || [ ${HOSTNAME:0:4} == "rhea" ]; then
  export mpasAutocloseFileLimitFraction=0.02
else
  export mpasAutocloseFileLimitFraction=0.2 # default value
fi

# PUT THE PROVIDED CASE INFORMATION IN CSH ARRAYS TO FACILITATE READING BY OTHER SCRIPTS
./bash_scripts/setup.bash

# RUN DIAGNOSTICS
if [ $generate_atm_diags -eq 1 ]; then
  if ! $run_batch_script; then
    echo "starting atm diags"
    ./bash_scripts/aprime_atm_diags.bash
    echo "atm diags complete"
    atm_status=$?
    if [ $atm_status -eq 0 ]; then
      # Update www/plots directory with newly generated plots
      cp -u $plots_dir/* $www_dir/$plots_dir_name

      echo
      echo "Updated atm plots in website directory: $www_dir/$plots_dir_name"
      echo
    fi
  else
    batch_script="$log_dir/batch_atm.$machname.$uniqueID.bash"
    if [ $machname == "nersc" ]; then
      sed 's@SBATCH --time=.*@SBATCH --time='$batch_walltime'@' ./bash_scripts/batch_atm.$machname.bash > $batch_script
      sed -i 's@SBATCH --output=.*@SBATCH --output='$log_dir'/aprime_atm_diags.o'$uniqueID'@' $batch_script
      sed -i 's@SBATCH --error=.*@SBATCH --error='$log_dir'/aprime_atm_diags.e'$uniqueID'@' $batch_script
      echo
      echo "**** Submitting atm batch script: batch_atm.$machname.$uniqueID.bash"
      echo "**** $batch_script"
      echo "**** jobID:"
      sbatch $batch_script
    elif [ ${HOSTNAME:0:5} == "titan" ]; then
      update_wwwdir_script="$log_dir/batch_update_wwwdir.$machname.$uniqueID.bash"
      sed 's@PBS -l walltime=.*@PBS -l walltime='$batch_walltime'@' ./bash_scripts/batch_atm.$machname.bash > $batch_script
      sed -i 's@PBS -o .*@PBS -o '$log_dir'/aprime_atm_diags.o'$uniqueID'@' $batch_script
      sed -i 's@PBS -e .*@PBS -e '$log_dir'/aprime_atm_diags.e'$uniqueID'@' $batch_script
      sed -i 's@batch_script=.*@batch_script='$update_wwwdir_script'@' $batch_script
      sed 's@PBS -o .*@PBS -o '$log_dir'/aprime_update_wwwdir.o'$uniqueID'@' \
       ./bash_scripts/batch_update_wwwdir.$machname.bash > $update_wwwdir_script
      sed -i 's@PBS -e .*@PBS -e '$log_dir'/aprime_update_wwwdir.e'$uniqueID'@' $update_wwwdir_script
      echo
      echo "**** Submitting atm batch script: batch_atm.$machname.$uniqueID.bash"
      echo "**** jobID:"
      qsub $batch_script
    else
      echo
      echo "Batch jobs not supported on current machine"
      echo "Please set 'run_batch_script' to false"
      echo
      exit
    fi
    echo "**** Batch job output/error files aprime_atm_diags.o*/aprime_atm_diags.e* will be available in log directory:"
    echo "**** $log_dir"
    atm_status=-2
  fi
else
  atm_status=-1
fi

if [ $generate_ocnice_diags -eq 1 ]; then
  if ! $run_batch_script; then
    echo "starting ocnice diags"
    ./bash_scripts/aprime_ocnice_diags.bash
    echo "ocnice diags complete"
    ocnice_status=$?
    if [ $ocnice_status -eq 0 ]; then
      # Update www/plots directory with newly generated plots
      cp -u $plots_dir/* $www_dir/$plots_dir_name

      echo
      echo "Updated ocn/ice plots in website directory: $www_dir/$plots_dir_name"
      echo
    fi
  else
    batch_script="$log_dir/batch_ocnice.$machname.$uniqueID.bash"
    if [ $machname == "nersc" ]; then
      sed 's@SBATCH --time=.*@SBATCH --time='$batch_walltime'@' ./bash_scripts/batch_ocnice.$machname.bash > $batch_script
      sed -i 's@SBATCH --output=.*@SBATCH --output='$log_dir'/aprime_ocnice_diags.o'$uniqueID'@' $batch_script
      sed -i 's@SBATCH --error=.*@SBATCH --error='$log_dir'/aprime_ocnice_diags.e'$uniqueID'@' $batch_script
      sed -i 's@SBATCH --nodes=.*@SBATCH --nodes='$mpas_analysis_tasks'@' $batch_script
      echo
      echo "**** Submitting ocn/ice batch script: batch_ocnice.$machname.$uniqueID.bash"
      echo "**** jobID:"
      sbatch $batch_script
    elif [ $machname == "olcf" ]; then
      update_wwwdir_script="$log_dir/batch_update_wwwdir.$machname.$uniqueID.bash"
      sed 's@PBS -l walltime=.*@PBS -l walltime='$batch_walltime'@' ./bash_scripts/batch_ocnice.$machname.bash > $batch_script
      sed -i 's@PBS -o .*@PBS -o '$log_dir'/aprime_ocnice_diags.o'$uniqueID'@' $batch_script
      sed -i 's@PBS -e .*@PBS -e '$log_dir'/aprime_ocnice_diags.e'$uniqueID'@' $batch_script
      sed -i 's@PBS -l nodes=.*@PBS -l nodes='$mpas_analysis_tasks'@' $batch_script
      sed -i 's@batch_script=.*@batch_script='$update_wwwdir_script'@' $batch_script
      sed 's@PBS -o .*@PBS -o '$log_dir'/aprime_update_wwwdir.o'$uniqueID'@' \
       ./bash_scripts/batch_update_wwwdir.$machname.bash > $update_wwwdir_script
      sed -i 's@PBS -e .*@PBS -e '$log_dir'/aprime_update_wwwdir.e'$uniqueID'@' $update_wwwdir_script
      echo
      echo "**** Submitting ocn/ice batch script: batch_ocnice.$machname.$uniqueID.bash"
      echo "**** jobID:"
      qsub $batch_script
    else
      echo
      echo "Batch jobs not supported on current machine"
      echo "Please set $run_batch_script to false"
      echo
      exit
    fi
    echo "**** Batch job output/error files aprime_ocnice_diags.o*/aprime_ocnice_diags.e* will be available in log directory:"
    echo "**** $log_dir"
    ocnice_status=-2
  fi
else
  ocnice_status=-1
fi

echo
echo "Status of atmospheric diagnostics: $atm_status"
echo " (0-->success, -1-->diags not invoked, -2-->batch_script, 3-->init error)"
echo "Status of ocean/ice diagnostics: $ocnice_status"
echo " (0-->success, -1-->diags not invoked, -2-->batch_script, 3-->init error)"
echo
echo "All log files, batch scripts, MPAS-Analysis config files available in log directory:"
echo $log_dir
echo "All climo and remapping files for this a-prime run available in scratch directory:"
echo $test_scratch_dir

# GENERATE HTML PAGE IF ASKED
if [ $atm_status -eq 0 ]    || [ $atm_status -eq -2 ]   ||
   [ $ocnice_status -eq 0 ] || [ $ocnice_status -eq -2 ]; then
  source $log_dir/case_info.temp 
  n_cases=${#case_set[@]}
  n_test_cases=$((n_cases - 1))

  for j in `seq 1 $n_test_cases`; do
     if [ $generate_html -eq 1 ]; then
	./bash_scripts/generate_html_index_file.bash	$j \
							$plots_dir \
							$www_dir
     fi
  done
  chmod ga+rX $www_dir
  chmod -R ga+rX $www_dir/$plots_dir_name
else
  echo
  echo "Neither atmospheric nor ocn/ice diagnostics were successful. HTML page not generated!"
  echo
fi

# COPY THIS RUN SCRIPT TO THE $log_dir FOR PROVENANCE
cp $0 $log_dir/run_aprime_$uniqueID.bash